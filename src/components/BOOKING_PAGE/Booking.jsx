import { useState, useEffect } from "react";
import "../../styles/Booking.css";
import tournir from "../../assets/booking-element.png";
import group1 from "../../assets/group1.png";
import group2 from "../../assets/group2.png";
import group3 from "../../assets/group3.png";
import theEnd from "../../assets/the-end.png";
import Header from "../../components/ABOUT_US/Header";
import Footer from "../HOME/Footer";
import { Star } from "lucide-react";
import axios from "axios";
import jwt_decode from "jwt-decode/build/jwt-decode.esm.js";
import { toast } from "react-toastify";

const Booking = () => {
  const [selectedCity, setSelectedCity] = useState("");
  const [selectedFacility, setSelectedFacility] = useState("");
  const [selectedDate, setSelectedDate] = useState("");
  const [selectedTime, setSelectedTime] = useState("");
  const [filteredFacilities, setFilteredFacilities] = useState([]);
  const [showBookingForm, setShowBookingForm] = useState(false);
  const [bookingData, setBookingData] = useState({
    name: "",
    phone: "",
    email: "",
    participants: 1,
  });

  const [showAddForm, setShowAddForm] = useState(false);
  const [newFacility, setNewFacility] = useState({
    name: "",
    city: "",
    address: "",
    type: "",
    capacity: "",
    workinghours: "",
    amenities: [],
    price: "",
    image: "",
  });

  const [currentPage, setCurrentPage] = useState(1);
  const [selectedFacilityDetail, setSelectedFacilityDetail] = useState(null);
  const [bookingDetails, setBookingDetails] = useState({
    date: "",
    timeSlot: "",
    duration: 1,
    players: 1,
  });
  const facilitiesPerPage = 5;
  const [searchTerm, setSearchTerm] = useState("");
  const [sportsData, setSportsData] = useState([]);

  useEffect(() => {
    axios
      .get("http://localhost:3000/sportsData")
      .then((response) => {
        setSportsData(response.data);
      })
      .catch((error) => {
        console.error("“ö–∞—Ç–µ —à—ã“õ—Ç—ã:", error);
      });
  }, []);

  useEffect(() => {
    const fetchReviews = async () => {
      if (!selectedFacilityDetail?.id) return;

      try {
        const response = await axios.get(
          `http://localhost:3000/reviews/${selectedFacilityDetail.id}`
        );

        const fetchedReviews = response.data.reviews || [];

        // ground –æ–±—ä–µ–∫—Ç—ñ—Å—ñ–Ω –∂–∞“£–∞—Ä—Ç—É
        setGround((prev) => ({
          ...prev,
          reviews: fetchedReviews,
        }));
      } catch (err) {
        console.error("–ü—ñ–∫—ñ—Ä–ª–µ—Ä–¥—ñ –∂“Ø–∫—Ç–µ—É “õ–∞—Ç–µ—Å—ñ:", err);
      }
    };

    fetchReviews();
  }, [selectedFacilityDetail?.id]);

  const [ground, setGround] = useState({
    reviews: [],
  });

  const [reviewUserName, setReviewUserName] = useState("");
  const [reviewRating, setReviewRating] = useState(0);
  const [reviewComment, setReviewComment] = useState("");

  const handleSave = async (sportId) => {
    try {
      const token = localStorage.getItem("token");
      const decoded = token ? jwt_decode(token) : null;
      const userId = decoded?.id;

      const response = await axios.post("http://localhost:3000/users/save", {
        userId,
        sportId,
      });

      toast.info("–°–ø–æ—Ä—Ç –ø—Ä–æ—Ñ–∏–ª—å–¥–µ —Å–∞“õ—Ç–∞–ª–¥—ã! –ë–∞—Å —Ç–∞—Ä—Ç—É “Ø—à—ñ–Ω –ø—Ä–æ—Ñ–∏–ª—å–≥–µ ”©—Ç—ñ“£—ñ–∑.");
    } catch (err) {
      console.error("“ö–∞—Ç–µ:", err.response?.data || err.message);
    }
  };

  const handleAddReview = async () => {
    if (
      reviewRating === 0 ||
      reviewComment.trim() === "" ||
      reviewUserName.trim() === ""
    ) {
      toast.error("–®–æ–ª—É –∂—ñ–±–µ—Ä—ñ–ª–º–µ–¥—ñ!!");
      return;
    }

    const newReview = {
      id: String(Date.now()),
      userName: reviewUserName,
      rating: reviewRating,
      comment: reviewComment,
      date: new Date().toISOString(),
    };

    try {
      await axios.post("http://localhost:3000/reviews/add", {
        sportId: selectedFacilityDetail.id,
        review: newReview,
      });

      setGround((prev) => ({
        ...prev,
        reviews: [newReview, ...prev.reviews],
      }));

      toast.success("–®–æ–ª—É —Å”ô—Ç—Ç—ñ “õ–æ—Å—ã–ª–¥—ã!");
      setReviewRating(0);
      setReviewComment("");
      setReviewUserName("");
    } catch (error) {
      console.error("–ü—ñ–∫—ñ—Ä–¥—ñ —Å–µ—Ä–≤–µ—Ä–≥–µ “õ–æ—Å—É –∫–µ–∑—ñ–Ω–¥–µ “õ–∞—Ç–µ:", error);
      toast.error("“ö–∞—Ç–µ —à—ã“õ—Ç—ã! –ö–µ–π—ñ–Ω—ñ—Ä–µ–∫ “õ–∞–π—Ç–∞–ª–∞–ø –∫”©—Ä—ñ“£—ñ–∑!");
    }
  };

  const cities = [...new Set(sportsData.map((facility) => facility.city))];
  const timeSlots = [
    "08:00-10:00",
    "10:00-12:00",
    "12:00-14:00",
    "14:00-16:00",
    "16:00-18:00",
    "18:00-20:00",
    "20:00-22:00",
  ];

  useEffect(() => {
    let filtered = sportsData;

    // “ö–∞–ª–∞ –±–æ–π—ã–Ω—à–∞ —Å“Ø–∑—É
    if (selectedCity) {
      filtered = filtered.filter((facility) => facility.city === selectedCity);
    }

    // –ê—Ç–∞—É—ã –±–æ–π—ã–Ω—à–∞ —Å“Ø–∑—É
    if (searchTerm.trim() !== "") {
      filtered = filtered.filter((facility) =>
        facility.name.toLowerCase().includes(searchTerm.toLowerCase())
      );
    }

    setFilteredFacilities(filtered);
  }, [selectedCity, searchTerm, sportsData]);

  const handleBooking = (e) => {
    e.preventDefault();
    toast.success(
      `–ë—Ä–æ–Ω–¥–∞—É —Å”ô—Ç—Ç—ñ –æ—Ä—ã–Ω–¥–∞–ª–¥—ã!\n\n–û–±—ä–µ–∫—Ç: ${
        sportsData.find((f) => f.id === Number.parseInt(selectedFacility))?.name
      }\n–ö“Ø–Ω—ñ: ${selectedDate}\n–£–∞“õ—ã—Ç—ã: ${selectedTime}\n–ê—Ç—ã-–∂”©–Ω—ñ: ${
        bookingData.name
      }\n–¢–µ–ª–µ—Ñ–æ–Ω: ${bookingData.phone}`
    );
    setShowBookingForm(false);
    setSelectedCity("");
    setSelectedFacility("");
    setSelectedDate("");
    setSelectedTime("");
    setBookingData({ name: "", phone: "", email: "", participants: 1 });
  };

  const selectedFacilityData = sportsData.find(
    (f) => f.id === Number.parseInt(selectedFacility)
  );

  const indexOfLastFacility = currentPage * facilitiesPerPage;
  const indexOfFirstFacility = indexOfLastFacility - facilitiesPerPage;
  const currentFacilities = filteredFacilities.slice(
    indexOfFirstFacility,
    indexOfLastFacility
  );
  const totalPages = Math.ceil(filteredFacilities.length / facilitiesPerPage);

  const handleBook = async (sportId) => {
    try {
      const token = localStorage.getItem("token");
      const decoded = jwt_decode(token);
      const userId = decoded?.id;

      await axios.post("http://localhost:3000/users/book-sport", {
        userId,
        sportId,
      });

      toast.success("–°”ô—Ç—Ç—ñ –±—Ä–æ–Ω–¥–∞–ª–¥—ã!");
    } catch (error) {
      console.error("–ë—Ä–æ–Ω–¥–∞—É “õ–∞—Ç–µ—Å—ñ:", error);
      toast.error("“ö–∞—Ç–µ —à—ã“õ—Ç—ã!");
    }
  };

  return (
    <div className="booking-body">
      <Header />
      <div className="booking-container">
        <div className="hero-section">
          <div className="hero-content">
            <h1 className="hero-title">üèüÔ∏è “ö–∞–∑–∞“õ—Å—Ç–∞–Ω–Ω—ã“£ —Å–ø–æ—Ä—Ç –∞–ª–∞“£–¥–∞—Ä—ã</h1>
            <p className="hero-subtitle">
              –ï–ª–¥—ñ“£ –∫–µ–∑ –∫–µ–ª–≥–µ–Ω –Ω“Ø–∫—Ç–µ—Å—ñ–Ω–µ–Ω —Å–ø–æ—Ä—Ç –∞–ª–∞“£–¥–∞—Ä—ã–Ω –æ–Ω–ª–∞–π–Ω –±—Ä–æ–Ω–¥–∞“£—ã–∑
            </p>
          </div>
        </div>

        <div className="filter-section">
          <div className="filter-container">
            <div className="filter-header">
              <h2>üîç –Ü–∑–¥–µ—É –∂”ô–Ω–µ —Å“Ø–∑–≥—ñ</h2>
            </div>

            <div className="filter-tabs">
              <button
                className={`filter-tab ${selectedCity === "" ? "active" : ""}`}
                onClick={() => setSelectedCity("")}
              >
                –ë–∞—Ä–ª—ã“ì—ã
              </button>
              {cities.map((city) => (
                <button
                  key={city}
                  className={`filter-tab ${
                    selectedCity === city ? "active" : ""
                  }`}
                  onClick={() => setSelectedCity(city)}
                >
                  {city}
                </button>
              ))}
            </div>
            <div className="search-input-wrapper">
              <input
                type="text"
                placeholder="–ê–ª–∞“£ –∞—Ç–∞—É—ã –±–æ–π—ã–Ω—à–∞ —ñ–∑–¥–µ—É..."
                value={searchTerm}
                onChange={(e) => setSearchTerm(e.target.value)}
                className="search-input"
              />
            </div>

            <div className="quick-filters">
              <button className="quick-filter">‚öΩ –§—É—Ç–±–æ–ª</button>
              <button className="quick-filter">üèí –•–æ–∫–∫–µ–π</button>
              <button className="quick-filter">üèÄ –ë–∞—Å–∫–µ—Ç–±–æ–ª</button>
              <button className="quick-filter">üéæ –¢–µ–Ω–Ω–∏—Å</button>
            </div>
          </div>
        </div>

        <div className="facilities-grid">
          {showAddForm && (
            <div className="modal-overlay">
              <div className="booking-modal">
                <div className="modal-header">
                  <h2>üèüÔ∏è –ñ–∞“£–∞ —Å–ø–æ—Ä—Ç –∞–ª–∞“£—ã–Ω “õ–æ—Å—É</h2>
                  <button
                    className="close-button"
                    onClick={() => setShowAddForm(false)}
                  >
                    ‚úï
                  </button>
                </div>

                <form
                  onSubmit={async (e) => {
                    e.preventDefault();
                    try {
                      const token = localStorage.getItem("token");
                      const decoded = jwt_decode(token);
                      const ownerId = decoded.id;

                      const response = await axios.post(
                        "http://localhost:3000/sportsData/add",
                        {
                          ...newFacility,
                          capacity: parseInt(newFacility.capacity),
                          price: parseInt(newFacility.price),
                          amenities: newFacility.amenities.filter(
                            (a) => a.trim() !== ""
                          ),
                          ownerId,
                        }
                      );

                      toast.success("–ê–ª–∞“£ —Å”ô—Ç—Ç—ñ “õ–æ—Å—ã–ª–¥—ã!");
                      setSportsData([...sportsData, response.data]);
                      setShowAddForm(false);
                      setNewFacility({
                        name: "",
                        city: "",
                        address: "",
                        type: "",
                        capacity: "",
                        workinghours: "",
                        amenities: [],
                        price: "",
                        image: "",
                      });
                    } catch (error) {
                      console.error("“ö–æ—Å—É “õ–∞—Ç–µ—Å—ñ:", error);
                      toast.error("“ö–∞—Ç–µ–ª—ñ –∫–æ—Ä—ã–Ω –∞–ª–¥—ã!");
                    }
                  }}
                  className="booking-form"
                >
                  {[
                    { label: "–ê—Ç–∞—É—ã", key: "name" },
                    { label: "“ö–∞–ª–∞", key: "city" },
                    { label: "–ú–µ–∫–µ–Ω-–∂–∞–π", key: "address" },
                    { label: "–¢“Ø—Ä—ñ", key: "type" },
                    { label: "–ñ“±–º—ã—Å —É–∞“õ—ã—Ç—ã", key: "workinghours" },
                    { label: "–°—ã–π—ã–º–¥—ã–ª—ã“õ", key: "capacity", type: "number" },
                    { label: "–ë–∞“ì–∞—Å—ã (‚Ç∏)", key: "price", type: "number" },
                    { label: "–°—É—Ä–µ—Ç —Å—ñ–ª—Ç–µ–º–µ—Å—ñ", key: "image" },
                  ].map(({ label, key, type = "text" }) => (
                    <div key={key} className="form-group">
                      <label>{label}</label>
                      <input
                        type={type}
                        value={newFacility[key]}
                        onChange={(e) =>
                          setNewFacility({
                            ...newFacility,
                            [key]: e.target.value,
                          })
                        }
                        required
                        className="form-input"
                      />
                    </div>
                  ))}

                  <div className="form-group">
                    <label>–ú“Ø–º–∫—ñ–Ω–¥—ñ–∫—Ç–µ—Ä (“Ø—Ç—ñ—Ä–º–µ–Ω –±”©–ª—ñ“£—ñ–∑)</label>
                    <input
                      type="text"
                      value={newFacility.amenities.join(", ")}
                      onChange={(e) =>
                        setNewFacility({
                          ...newFacility,
                          amenities: e.target.value.split(","),
                        })
                      }
                      className="form-input"
                    />
                  </div>

                  <div className="form-actions">
                    <button
                      type="button"
                      onClick={() => setShowAddForm(false)}
                      className="cancel-button"
                    >
                      –ë–∞—Å —Ç–∞—Ä—Ç—É
                    </button>
                    <button type="submit" className="confirm-button">
                      “ö–æ—Å—É
                    </button>
                  </div>
                </form>
              </div>
            </div>
          )}

          <button
            className="add-facility-btn"
            onClick={() => setShowAddForm(true)}
          >
            ‚ûï ”®–∑ –∞–ª–∞“£—ã“£—ã–∑–¥—ã “õ–æ—Å—ã“£—ã–∑
          </button>

          {currentFacilities.map((facility) => (
            <div
              key={facility.id}
              className="facility-card"
              onClick={() => setSelectedFacilityDetail(facility)}
            >
              <div className="facility-image">
                <img
                  src={facility.image || "/placeholder.svg"}
                  alt={facility.name}
                />
                <div className="facility-rating">‚≠ê {facility.rating}</div>
              </div>

              <div className="facility-content">
                <div className="facility-header">
                  <h3 className="facility-name">{facility.name}</h3>
                  <span className="facility-type">{facility.type}</span>
                </div>

                <div className="facility-details">
                  <p className="facility-location">üìç {facility.address}</p>
                  <p className="facility-capacity">
                    üë• {facility.capacity} –∞–¥–∞–º
                  </p>
                  <p className="facility-hours">üïê {facility.workinghours}</p>
                </div>

                <div className="facility-amenities">
                  {facility.amenities.map((amenity) => (
                    <span key={amenity} className="amenity-tag">
                      {amenity}
                    </span>
                  ))}
                </div>

                <div className="facility-footer">
                  <div className="facility-price">
                    <h2>{facility.price.toLocaleString()} ‚Ç∏</h2>{" "}
                    <span>/—Å–∞“ì–∞—Ç</span>
                  </div>
                  <button
                    className="details-button"
                    onClick={() => setSelectedFacilityDetail(facility)}
                  >
                    –¢–æ–ª—ã“õ –∞“õ–ø–∞—Ä–∞—Ç
                  </button>
                </div>
              </div>
            </div>
          ))}
        </div>

        {totalPages > 1 && (
          <div className="pagination">
            <button
              className="pagination-btn"
              onClick={() => setCurrentPage((prev) => Math.max(prev - 1, 1))}
              disabled={currentPage === 1}
            >
              ‚Üê –ê–ª–¥—ã“£“ì—ã
            </button>

            {[...Array(totalPages)].map((_, index) => (
              <button
                key={index + 1}
                className={`pagination-number ${
                  currentPage === index + 1 ? "active" : ""
                }`}
                onClick={() => setCurrentPage(index + 1)}
              >
                {index + 1}
              </button>
            ))}

            <button
              className="pagination-btn"
              onClick={() =>
                setCurrentPage((prev) => Math.min(prev + 1, totalPages))
              }
              disabled={currentPage === totalPages}
            >
              –ö–µ–ª–µ—Å—ñ ‚Üí
            </button>
          </div>
        )}

        {selectedFacilityDetail && (
          <div className="detail-modal-overlay">
            <div className="detail-modal">
              <div className="detail-header">
                <h2>{selectedFacilityDetail.name}</h2>
                <button
                  className="close-detail"
                  onClick={() => setSelectedFacilityDetail(null)}
                >
                  <svg
                    width="20px"
                    height="20px"
                    viewBox="0 0 24 24"
                    fill="none"
                    xmlns="http://www.w3.org/2000/svg"
                    stroke="#000000"
                    strokeWidth="0.624"
                  >
                    <g id="SVGRepo_bgCarrier" strokeWidth="0"></g>
                    <g
                      id="SVGRepo_tracerCarrier"
                      strokeLinecap="round"
                      strokeLinejoin="round"
                    ></g>
                    <g id="SVGRepo_iconCarrier">
                      {" "}
                      <path
                        d="M20.7457 3.32851C20.3552 2.93798 19.722 2.93798 19.3315 3.32851L12.0371 10.6229L4.74275 3.32851C4.35223 2.93798 3.71906 2.93798 3.32854 3.32851C2.93801 3.71903 2.93801 4.3522 3.32854 4.74272L10.6229 12.0371L3.32856 19.3314C2.93803 19.722 2.93803 20.3551 3.32856 20.7457C3.71908 21.1362 4.35225 21.1362 4.74277 20.7457L12.0371 13.4513L19.3315 20.7457C19.722 21.1362 20.3552 21.1362 20.7457 20.7457C21.1362 20.3551 21.1362 19.722 20.7457 19.3315L13.4513 12.0371L20.7457 4.74272C21.1362 4.3522 21.1362 3.71903 20.7457 3.32851Z"
                        fill="#0F0F0F"
                      ></path>{" "}
                    </g>
                  </svg>
                </button>
              </div>

              <div className="detail-content">
                <div className="detail-left">
                  <button
                    onClick={() => handleSave(selectedFacilityDetail.id)}
                    className="bookmarkBtn"
                  >
                    <span className="IconContainer">
                      <svg
                        viewBox="0 0 384 512"
                        height="0.9em"
                        className="icon"
                      >
                        <path d="M0 48V487.7C0 501.1 10.9 512 24.3 512c5 0 9.9-1.5 14-4.4L192 400 345.7 507.6c4.1 2.9 9 4.4 14 4.4c13.4 0 24.3-10.9 24.3-24.3V48c0-26.5-21.5-48-48-48H48C21.5 0 0 21.5 0 48z" />
                      </svg>
                    </span>
                    <p className="text">–°–∞“õ—Ç–∞—É</p>
                  </button>
                  <div className="detail-image">
                    <img
                      src={selectedFacilityDetail.image || "/placeholder.svg"}
                      alt={selectedFacilityDetail.name}
                    />
                  </div>

                  <div className="detail-info">
                    <h3>üìç –û—Ä–Ω–∞–ª–∞—Å“õ–∞–Ω –∂–µ—Ä—ñ</h3>
                    <p>{selectedFacilityDetail.address}</p>

                    <h3>üèüÔ∏è –ê–ª–∞“£ —Ç—É—Ä–∞–ª—ã</h3>
                    <p>–¢“Ø—Ä—ñ: {selectedFacilityDetail.type}</p>
                    <p>–°—ã–π—ã–º–¥—ã–ª—ã“ì—ã: {selectedFacilityDetail.capacity} –∞–¥–∞–º</p>
                    <p>–ñ“±–º—ã—Å —É–∞“õ—ã—Ç—ã: {selectedFacilityDetail.workinghours}</p>
                    <p>–†–µ–π—Ç–∏–Ω–≥: ‚≠ê {selectedFacilityDetail.rating}</p>

                    <h3>üéØ –ú“Ø–º–∫—ñ–Ω–¥—ñ–∫—Ç–µ—Ä</h3>
                    <div className="detail-amenities">
                      {selectedFacilityDetail.amenities.map((amenity) => (
                        <span key={amenity} className="detail-amenity">
                          {amenity}
                        </span>
                      ))}
                    </div>
                  </div>

                  <div className="rev-section">
                    <h3 className="rev-title">–ü–∞–π–¥–∞–ª–∞–Ω—É—à—ã —à–æ–ª—É–ª–∞—Ä—ã</h3>
                    {ground.reviews.length > 0 ? (
                      <div className="rev-list">
                        {ground.reviews.map((review) => (
                          <div key={review.id} className="rev-card">
                            <div className="rev-inner">
                              <div className="rev-header">
                                <div className="rev-username">
                                  {review.userName}
                                </div>
                                <div className="rev-stars">
                                  {Array.from({ length: review.rating }).map(
                                    (_, i) => (
                                      <Star
                                        key={i}
                                        className="rev-star-filled"
                                      />
                                    )
                                  )}
                                  {Array.from({
                                    length: 5 - review.rating,
                                  }).map((_, i) => (
                                    <Star key={i} className="rev-star-empty" />
                                  ))}
                                </div>
                              </div>
                              <p className="rev-comment">{review.comment}</p>
                              <p className="rev-date">
                                {new Date(review.date).toLocaleDateString()}
                              </p>
                            </div>
                          </div>
                        ))}
                      </div>
                    ) : (
                      <p className="rev-empty">–ë“±–ª –∞–ª–∞“£“ì–∞ ”ô–ª—ñ —à–æ–ª—É–ª–∞—Ä –∂–æ“õ.</p>
                    )}

                    <div className="rev-form-wrapper">
                      <h4 className="rev-form-title">–®–æ–ª—É “õ–∞–ª–¥—ã—Ä—É</h4>
                      <div className="rev-form">
                        <div>
                          <label
                            htmlFor="review-user-name"
                            className="rev-label"
                          >
                            –ê—Ç—ã-–∂”©–Ω—ñ“£—ñ–∑
                          </label>
                          <input
                            id="review-user-name"
                            value={reviewUserName}
                            onChange={(e) => setReviewUserName(e.target.value)}
                            className="rev-input"
                            placeholder="–ê—Ç—ã-–∂”©–Ω—ñ“£—ñ–∑–¥—ñ –µ–Ω–≥—ñ–∑—ñ“£—ñ–∑"
                          />
                        </div>
                        <div>
                          <label className="rev-label">–†–µ–π—Ç–∏–Ω–≥</label>
                          <div className="rev-rating">
                            {[1, 2, 3, 4, 5].map((star) => (
                              <button
                                key={star}
                                onClick={() => setReviewRating(star)}
                                className={`rev-star-button ${
                                  reviewRating >= star ? "rev-active" : ""
                                }`}
                              >
                                <Star className="rev-star-icon" />
                              </button>
                            ))}
                          </div>
                        </div>
                        <div>
                          <label htmlFor="review-comment" className="rev-label">
                            –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π
                          </label>
                          <textarea
                            id="review-comment"
                            value={reviewComment}
                            onChange={(e) => setReviewComment(e.target.value)}
                            className="rev-textarea"
                            placeholder="–ü—ñ–∫—ñ—Ä—ñ“£—ñ–∑–¥—ñ –∂–∞–∑—ã“£—ã–∑..."
                          />
                        </div>
                        <button
                          onClick={handleAddReview}
                          className="rev-submit"
                        >
                          –®–æ–ª—É–¥—ã “õ–æ—Å—É
                        </button>
                      </div>
                    </div>
                  </div>
                </div>

                <div className="detail-right">
                  <div className="booking-widget">
                    <h3>üéØ –ë—Ä–æ–Ω–¥–∞—É</h3>

                    <div className="booking-form-group">
                      <label>üìÖ –ö“Ø–Ω —Ç–∞“£–¥–∞“£—ã–∑</label>
                      <input
                        type="date"
                        value={bookingDetails.date}
                        onChange={(e) =>
                          setBookingDetails({
                            ...bookingDetails,
                            date: e.target.value,
                          })
                        }
                        min={new Date().toISOString().split("T")[0]}
                        className="booking-input"
                      />
                    </div>

                    <div className="booking-form-group">
                      <label>‚è∞ –£–∞“õ—ã—Ç —Ç–∞“£–¥–∞“£—ã–∑</label>
                      <div className="time-slots">
                        {timeSlots.map((time) => (
                          <button
                            key={time}
                            className={`time-slot ${
                              bookingDetails.timeSlot === time ? "selected" : ""
                            }`}
                            onClick={() =>
                              setBookingDetails({
                                ...bookingDetails,
                                timeSlot: time,
                              })
                            }
                          >
                            {time}
                          </button>
                        ))}
                      </div>
                    </div>

                    <div className="booking-form-group">
                      <label>‚è±Ô∏è –û–π—ã–Ω “±–∑–∞“õ—Ç—ã“ì—ã (—Å–∞“ì–∞—Ç)</label>
                      <div className="duration-selector">
                        {[1, 2, 3, 4].map((hour) => (
                          <button
                            key={hour}
                            className={`duration-btn ${
                              bookingDetails.duration === hour ? "selected" : ""
                            }`}
                            onClick={() =>
                              setBookingDetails({
                                ...bookingDetails,
                                duration: hour,
                              })
                            }
                          >
                            {hour} —Å–∞“ì–∞—Ç
                          </button>
                        ))}
                      </div>
                    </div>

                    <div className="booking-form-group">
                      <label>üë• –û–π—ã–Ω—à—ã–ª–∞—Ä —Å–∞–Ω—ã</label>
                      <div className="players-selector">
                        <button
                          onClick={() =>
                            setBookingDetails({
                              ...bookingDetails,
                              players: Math.max(1, bookingDetails.players - 1),
                            })
                          }
                          className="player-btn"
                        >
                          -
                        </button>
                        <span className="player-count">
                          {bookingDetails.players}
                        </span>
                        <button
                          onClick={() =>
                            setBookingDetails({
                              ...bookingDetails,
                              players: Math.min(
                                selectedFacilityDetail.capacity,
                                bookingDetails.players + 1
                              ),
                            })
                          }
                          className="player-btn"
                        >
                          +
                        </button>
                      </div>
                    </div>

                    <div className="price-calculation">
                      <div className="price-row">
                        <span>–°–∞“ì–∞—Ç—Ç—ã“õ –±–∞“ì–∞:</span>
                        <span>
                          {selectedFacilityDetail.price.toLocaleString()} ‚Ç∏
                        </span>
                      </div>
                      <div className="price-row">
                        <span>“∞–∑–∞“õ—Ç—ã“ì—ã:</span>
                        <span>{bookingDetails.duration} —Å–∞“ì–∞—Ç</span>
                      </div>
                      <div className="price-total">
                        <span>–ñ–∞–ª–ø—ã —Å–æ–º–∞:</span>
                        <span>
                          {(
                            selectedFacilityDetail.price *
                            bookingDetails.duration
                          ).toLocaleString()}{" "}
                          ‚Ç∏
                        </span>
                      </div>
                    </div>

                    <button
                      className="book-now-btn"
                      onClick={() => {
                        if (bookingDetails.date && bookingDetails.timeSlot) {
                          setShowBookingForm(true);
                          setSelectedFacility(
                            selectedFacilityDetail.id.toString()
                          );
                          setSelectedDate(bookingDetails.date);
                          setSelectedTime(bookingDetails.timeSlot);
                        } else {
                          toast.info("–ö“Ø–Ω –º–µ–Ω —É–∞“õ—ã—Ç—Ç—ã —Ç–∞“£–¥–∞“£—ã–∑");
                        }
                      }}
                      disabled={
                        !bookingDetails.date || !bookingDetails.timeSlot
                      }
                    >
                      üí≥ –°–∞—Ç—ã–ø –∞–ª—É
                    </button>
                  </div>
                </div>
              </div>
            </div>
          </div>
        )}

        {showBookingForm && selectedFacilityData && (
          <div className="modal-overlay">
            <div className="booking-modal">
              <div className="modal-header">
                <h2>üéØ –ë—Ä–æ–Ω–¥–∞—É —Ä–∞—Å—Ç–∞—É</h2>
                <button
                  className="close-button"
                  onClick={() => setShowBookingForm(false)}
                >
                  ‚úï
                </button>
              </div>

              <div className="booking-summary">
                <h3>{selectedFacilityData.name}</h3>
                <p>üìç {selectedFacilityData.address}</p>
                <p>üìÖ {selectedDate}</p>
                <p>‚è∞ {selectedTime}</p>
                <p className="total-price">
                  üí∞ {selectedFacilityData.price.toLocaleString()} ‚Ç∏
                </p>
              </div>

              <form onSubmit={handleBooking} className="booking-form">
                <div className="form-group">
                  <label>üë§ –ê—Ç—ã-–∂”©–Ω—ñ *</label>
                  <input
                    type="text"
                    value={bookingData.name}
                    onChange={(e) =>
                      setBookingData({ ...bookingData, name: e.target.value })
                    }
                    required
                    className="form-input"
                  />
                </div>

                <div className="form-group">
                  <label>üì± –¢–µ–ª–µ—Ñ–æ–Ω *</label>
                  <input
                    type="tel"
                    value={bookingData.phone}
                    onChange={(e) =>
                      setBookingData({ ...bookingData, phone: e.target.value })
                    }
                    required
                    className="form-input"
                    placeholder="+7 (___) ___-__-__"
                  />
                </div>

                <div className="form-group">
                  <label>üìß Email</label>
                  <input
                    type="email"
                    value={bookingData.email}
                    onChange={(e) =>
                      setBookingData({ ...bookingData, email: e.target.value })
                    }
                    className="form-input"
                  />
                </div>

                <div className="form-group">
                  <label>üë• “ö–∞—Ç—ã—Å—É—à—ã–ª–∞—Ä —Å–∞–Ω—ã</label>
                  <input
                    type="number"
                    value={bookingData.participants}
                    onChange={(e) =>
                      setBookingData({
                        ...bookingData,
                        participants: e.target.value,
                      })
                    }
                    min="1"
                    max={selectedFacilityData.capacity}
                    className="form-input"
                  />
                </div>

                <div className="form-actions">
                  <button
                    type="button"
                    className="cancel-button"
                    onClick={() => setShowBookingForm(false)}
                  >
                    –ë–∞—Å —Ç–∞—Ä—Ç—É
                  </button>
                  <button
                    type="submit"
                    className="confirm-button"
                    onClick={() => handleBook(selectedFacilityData.id)}
                  >
                    –†–∞—Å—Ç–∞—É
                  </button>
                </div>
              </form>
            </div>
          </div>
        )}

        <section className="hiw-container">
          <h2 className="hiw-title">“ö–∞–ª–∞–π –∂“±–º—ã—Å —ñ—Å—Ç–µ–π–¥—ñ?</h2>
          <div className="hiw-steps-wrapper">
            <div className="hiw-step">
              <div className="hiw-step-number">1</div>
              <h3 className="hiw-step-title">–ê–ª–∞“£–¥—ã —Ç–∞–±—ã“£—ã–∑</h3>
              <p className="hiw-step-description">
                “ö–∞–ª–∞, —Å–ø–æ—Ä—Ç —Ç“Ø—Ä—ñ –∂”ô–Ω–µ –±–∞—Å“õ–∞ —Å“Ø–∑–≥—ñ–ª–µ—Ä –∞—Ä“õ—ã–ª—ã “õ–∞–∂–µ—Ç—Ç—ñ –∞–ª–∞“£–¥—ã
                —ñ–∑–¥–µ“£—ñ–∑. –ë—ñ–∑–¥—ñ“£ –∫–µ“£ –±–∞–∑–∞–º—ã–∑–¥–∞–Ω —Ç–∞“£–¥–∞“£—ã–∑.
              </p>
            </div>
            <div className="hiw-step">
              <div className="hiw-step-number">2</div>
              <h3 className="hiw-step-title">–ë—Ä–æ–Ω–¥–∞—É–¥—ã —Ä–∞—Å—Ç–∞“£—ã–∑</h3>
              <p className="hiw-step-description">
                “ö–∞–∂–µ—Ç—Ç—ñ –∫“Ø–Ω –º–µ–Ω —É–∞“õ—ã—Ç—Ç—ã —Ç–∞“£–¥–∞–ø, –±—Ä–æ–Ω–¥–∞—É–¥—ã —Ä–∞—Å—Ç–∞“£—ã–∑. –ë–∞—Ä–ª—ã“õ
                –º”ô–ª—ñ–º–µ—Ç—Ç–µ—Ä–¥—ñ —Ç–µ–∫—Å–µ—Ä—ñ–ø, —Ç”©–ª–µ–º –∂–∞—Å–∞“£—ã–∑.
              </p>
            </div>
            <div className="hiw-step">
              <div className="hiw-step-number">3</div>
              <h3 className="hiw-step-title">–û–π–Ω–∞—É“ì–∞ –±–∞—Ä—ã“£—ã–∑!</h3>
              <p className="hiw-step-description">
                –ë—Ä–æ–Ω–¥–∞–ª“ì–∞–Ω —É–∞“õ—ã—Ç—Ç–∞ –∞–ª–∞“£“ì–∞ –±–∞—Ä—ã–ø, —Å–ø–æ—Ä—Ç—Ç–∞–Ω –ª”ô–∑–∑–∞—Ç –∞–ª—ã“£—ã–∑. –ë—ñ–∑
                —Å—ñ–∑–≥–µ –µ“£ –∂–∞“õ—Å—ã —Ç”ô–∂—ñ—Ä–∏–±–µ–Ω—ñ “±—Å—ã–Ω–∞–º—ã–∑.
              </p>
            </div>
          </div>
        </section>

        <img
          onClick={() => {
            toast.info("”®—Ç—ñ–Ω—ñ–º –∂—ñ–±–µ—Ä—ñ–ª–¥—ñ, –±—ñ–∑ —Å—ñ–∑–≥–µ —Ö–∞–±–∞—Ä–ª–∞—Å–∞–º—ã–∑!");
          }}
          className="tournir-sec"
          width={"100%"}
          src={tournir}
          alt=""
        />

        <section className="zhai-section">
          <img src={group1} alt="" />
          <img src={group2} alt="" />
          <img src={group3} alt="" />
        </section>

        <section className="the-end-section">
          <img width={"100%"} src={theEnd} alt="" />
        </section>
      </div>

      <Footer></Footer>
    </div>
  );
};

export default Booking;
